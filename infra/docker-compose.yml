version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - my-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - my-network

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - my-network

  kafka-init:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - kafka
    entrypoint: /bin/sh
    command: -c "
      echo '‚è≥ Waiting for Kafka...';
      sleep 10;
      echo 'üì¶ Creating topics...';
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic audit-events --replication-factor 1 --partitions 1;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic auth-events --replication-factor 1 --partitions 1;
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic gateway-topic --replication-factor 1 --partitions 1;
      echo '‚úÖ Done.';
      "
    networks:
      - my-network

  backend-keycloak-auth:
    image: quay.io/keycloak/keycloak:24.0.4
    container_name: backend-keycloak-auth
    command: start-dev --import-realm --import-realm-path=/opt/keycloak/data/import/realm-export.json
    ports:
      - "8080:8080"
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
    volumes:
      - ./realm-export.json:/opt/keycloak/data/import/realm-export.json
    networks:
      - my-network

  backend-gateway-client:
    build:
      context: ../gateway-service
    container_name: backend-gateway-client
    depends_on:
      - backend-keycloak-auth
      - auth-service
    ports:
      - "9090:9090"
    networks:
      - my-network

  audit-service:
    build:
      context: ../audit-service
    container_name: audit-service
    depends_on:
      - postgres
      - kafka
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/audit_service
      SPRING_DATASOURCE_USERNAME: audit_service
      SPRING_DATASOURCE_PASSWORD: audit_service
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_TOPIC_AUDIT_EVENTS: audit-events
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 60s
    networks:
      - my-network

  auth-service:
    build:
      context: ../auth-service
    container_name: auth-service
    depends_on:
      - backend-keycloak-auth
      - postgres
      - kafka
      - audit-service
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/auth_service
      SPRING_DATASOURCE_USERNAME: auth_service
      SPRING_DATASOURCE_PASSWORD: auth_service
      AUDIT_SERVICE_URL: http://audit-service:8082
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - my-network

volumes:
  postgres-data:

networks:
  my-network:
    name: infra_my-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/16